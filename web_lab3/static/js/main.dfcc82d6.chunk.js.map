{"version":3,"sources":["hoc/SignLayout.js","utils/Auth/Auth.js","hoc/Routes/SignRoute.js","utils/UI/Input/Input.js","utils/Validation/Validation.js","config.js","components/Sign/SignIn.js","components/Sign/SignUp.js","components/Main/Note/Note.js","components/ManageNote/ManageNote.js","components/Main/Main.js","components/Note/Note.js","components/User/User.js","hoc/DefaultLayout.js","hoc/Routes/DefaultRoute.js","App.js","serviceWorker.js","index.js"],"names":["SignLayout","props","id","className","children","Auth","isLoggedIn","localStorage","getItem","loggedApiKey","signIn","apiKey","setItem","window","location","href","logOut","removeItem","SignRoute","Component","component","rest","to","render","Input","this","showValidate","valid","inputType","type","cls","isInvalid","push","join","placeholder","onChange","value","onBlur","errorMessage","React","Validation","checkEmail","email","test","isEmpty","str","trim","checkMaxLength","max","length","checkMinLength","min","checkPasswordSymbols","checkMinCountUpperCase","minCount","RegExp","checkMinCountLowerCase","checkMinCountDigits","checkMinDate","date","getFullYear","getMonth","getDay","checkMinNumber","number","checkMaxNumber","CONFIG","SingIn","state","formControls","iconClassName","validation","required","password","remember","controlName","control","setState","onChangeHandler","event","target","validateControlInfo","validateControl","isValid","validator","minLength","maxLength","equalTo","minCountLetters","minCountUpperCase","minCountLowerCase","minCountDigits","onlyLatin","renderInputs","Object","keys","map","index","key","e","handleSubmit","preventDefault","forEach","axios","post","client_id","client_secret","grant_type","username","headers","then","res","status","data","access_token","catch","error","Fragment","onSubmit","name","passwordSymbols","repassword","response","alert","Note","note","title","text","ManageNote","isBlur","inputOnChangeHandler","inputOnBlurHandler","isFormValid","saveNote","editMode","put","onChangeNote","onClosePopup","Modal","animation","size","show","isOpened","onHide","Header","closeButton","Title","Body","Footer","onClick","icon","Main","notes","hasNotes","openedModal","componentDidMount","get","renderNotes","addNote","unshift","authors","isFound","viewedAuthorInput","authorEmail","match","params","renderAuthors","author","is_creator","deleteAuthor","indexOf","delete","splice","deleteNote","confirm","onAddAuthor","note_id","renderFunctionalityToAddAuthor","User","loaded","changeName","swal","changeEmail","console","log","changePassword","library","add","faScroll","faUser","faSignOutAlt","faTrashAlt","faPen","faUserPlus","faTag","faCheck","DefaultLayout","DefaultRoute","App","path","exact","SignIn","SignUp","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.dfcc82d6.chunk.js","sourcesContent":["import React from 'react';\nimport \"./SignLayout.scss\";\n\nfunction SignLayout(props) {\n    return (\n        <div id=\"sign-page\" className=\"container-fluid\">\n            <div className=\"sign-wrapper\">\n                {props.children}\n            </div>\n        </div>\n    );\n}\n\nexport default SignLayout;\n","export default class Auth {\n    static isLoggedIn = !!localStorage.getItem('apiKey');\n    static loggedApiKey = localStorage.getItem('apiKey');\n\n    static signIn = (apiKey) => {\n        localStorage.setItem('apiKey', apiKey);\n        window.location.href = \"/\";\n    };\n\n    static logOut = () => {\n        localStorage.removeItem('apiKey');\n        window.location.href = \"/signin\";\n    }\n}\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport SignLayout from '../SignLayout';\nimport Auth from \"../../utils/Auth/Auth\";\n\nconst SignRoute = ({ component: Component, ...rest }) => {\n    if (Auth.isLoggedIn) {\n        return (<Redirect to={\"/\"}/>);\n    }\n\n    return (\n        <Route {...rest} render={props => (\n            <SignLayout>\n                <Component {...props} />\n            </SignLayout>\n        )} />\n    )\n}\n\nexport default SignRoute;\n","import React from 'react';\n\nclass Input extends React.Component {\n\n    isInvalid() {\n        if (this.props.showValidate && !this.props.valid) {\n            return true;\n        }\n        return false;\n    }\n\n    render() {\n        const inputType = this.props.type || 'text';\n        const cls = ['sign-form-input', 'form-control'];\n\n        if (this.isInvalid()) {\n            cls.push('error');\n        }\n\n        return (\n            <div className=\"form-group\">\n                <input type={inputType}\n                       className={cls.join(' ')}\n                       placeholder={this.props.placeholder}\n                       onChange={this.props.onChange}\n                       value={this.props.value || ''}\n                       onBlur={this.props.onBlur}\n                />\n                <small className=\"error-message\">{this.isInvalid() ? this.props.errorMessage : ''}</small>\n            </div>\n        );\n    }\n}\n\nexport default Input;\n","class Validation {\n    checkEmail = (email) => {\n        // eslint-disable-next-line\n        let validEmailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        return validEmailRegex.test(email);\n    };\n\n    isEmpty = (str) => {\n        return str.trim() === '';\n    };\n\n    checkMaxLength = (str, max) => {\n        return str.length <= max;\n    };\n\n    checkMinLength = (str, min) => {\n        return str.length >= min;\n    };\n\n    checkPasswordSymbols = (str) => {\n        let regex = /^[\\w!#$%&*+?@^]+$/;\n        return regex.test(str);\n    };\n\n    checkMinCountUpperCase = (str, minCount) => {\n        let regex = new RegExp('[A-Z]{' + minCount + ',}');\n        return regex.test(str);\n    };\n\n    checkMinCountLowerCase = (str, minCount) => {\n        let regex = new RegExp('[a-z]{' + minCount + ',}');\n        return regex.test(str);\n    };\n\n    checkMinCountDigits = (str, minCount) => {\n        let regex = new RegExp('\\\\d{' + minCount + ',}');\n        return regex.test(str);\n    };\n\n    checkMinDate = (date, min) => {\n        if (date.getFullYear() <= min.getFullYear() && date.getMonth() <= min.getMonth() && date.getDay() < min.getDay())\n            return false;\n        return true;\n    };\n\n    checkMinNumber = (number, min) => {\n        if (number < min)\n            return false;\n        return true;\n    };\n\n    checkMaxNumber = (number, max) => {\n        if (number > max)\n            return false;\n        return true;\n    };\n}\n\nexport default Validation;\n","export const CONFIG = {\n    apiServer: 'https://weblabnotes.herokuapp.com/'\n};\n","import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport Input from \"../../utils/UI/Input/Input\"\nimport Validation from \"../../utils/Validation/Validation\";\nimport {CONFIG} from \"../../config\";\nimport axios from \"axios\";\nimport Auth from \"../../utils/Auth/Auth\";\n\nclass SingIn extends React.Component {\n\n    state = {\n        formControls: {\n            email: {\n                type: 'email',\n                placeholder: 'Email',\n                value: '',\n                valid: false,\n                errorMessage: 'Enter valid email',\n                iconClassName: 'fas fa-envelope',\n                showValidate: false,\n                validation: {\n                    required: true,\n                    email: true\n                }\n            },\n            password: {\n                type: 'password',\n                placeholder: 'Password',\n                value: '',\n                valid: false,\n                errorMessage: 'Enter valid password',\n                iconClassName: 'fas fa-lock',\n                showValidate: false,\n                validation: {\n                    required: true,\n                }\n            }\n        },\n        remember: false\n    };\n\n    onBlur = (controlName) => {\n        const formControls = {...this.state.formControls};\n        const control = {...formControls[controlName]};\n        control.showValidate = true;\n\n        if (this.state.formControls.email.errorMessage === 'Invalid email or password.') {\n            formControls.email.valid = true;\n        }\n\n        formControls[controlName] = control;\n\n        this.setState({\n            formControls\n        });\n    }\n\n    onChangeHandler = (event, controlName) => {\n        const formControls = {...this.state.formControls};\n        const control = {...formControls[controlName]};\n\n        control.value = (event.target).value;\n        let validateControlInfo = this.validateControl(control.value, control.validation);\n\n        control.valid = validateControlInfo.isValid;\n        if (validateControlInfo.errorMessage !== '') {\n            control.errorMessage = validateControlInfo.errorMessage;\n        }\n\n        formControls[controlName] = control;\n\n        this.setState({\n            formControls\n        });\n    };\n\n    validateControl = (value, validation) => {\n        if (!validation) {\n            return {isValid: true, errorMessage: ''};\n        }\n\n        let validator = new Validation();\n\n        let isValid = true;\n        let errorMessage = '';\n\n        if (validation.required && isValid) {\n            isValid = !validator.isEmpty(value);\n            if (!isValid) errorMessage = 'Field is required.';\n        }\n\n        if (validation.email && isValid) {\n            isValid = validator.checkEmail(value);\n            if (!isValid) errorMessage = 'Invalid email.';\n        }\n\n        if (validation.minLength && isValid) {\n            isValid = validator.checkMinLength(value, validation.minLength);\n            if (!isValid) errorMessage = 'You should put minimum ' + validation.minLength + ' chars.';\n        }\n\n        if (validation.maxLength && isValid) {\n            isValid = validator.checkMaxLength(value, validation.maxLength);\n            if (!isValid) errorMessage = 'You can put maximum ' + validation.maxLength + ' chars.';\n        }\n\n        if (validation.equalTo && isValid) {\n            isValid = (value === this.state.formControls[validation.equalTo].value);\n            if (!isValid) errorMessage = 'Passwords should be equal.';\n        }\n\n        if (validation.minCountLetters && isValid) {\n            isValid = validator.checkPasswordSymbols(value);\n            if (!isValid) errorMessage = 'You can use only latin letters, numbers and symbols(!,#,$,%,&,*,+,?,@,^)';\n        }\n\n        if (validation.minCountUpperCase && isValid) {\n            isValid = validator.checkMinCountUpperCase(value, validation.minCountUpperCase);\n            if (!isValid) errorMessage = 'You should put minimum ' + validation.minCountUpperCase + ' letter(s) in upper case.';\n        }\n\n        if (validation.minCountLowerCase && isValid) {\n            isValid = validator.checkMinCountLowerCase(value, validation.minCountLowerCase);\n            if (!isValid) errorMessage = 'You should put minimum ' + validation.minCountLowerCase + ' letter(s) in lower case.';\n        }\n\n        if (validation.minCountDigits && isValid) {\n            isValid = validator.checkMinCountDigits(value, validation.minCountDigits);\n            if (!isValid) errorMessage = 'You should put minimum ' + validation.minCountDigits + ' digit(s).';\n        }\n\n        if (validation.onlyLatin && isValid) {\n            isValid = (value === this.state.formControls[validation.equalTo].value);\n            if (!isValid) errorMessage = 'Passwords should be equal.';\n        }\n\n        return {isValid: isValid, errorMessage: errorMessage};\n    };\n\n    renderInputs = () => {\n        const inputs = Object.keys(this.state.formControls).map((controlName, index) => {\n            const control = this.state.formControls[controlName];\n            return (\n                <Input\n                    key={controlName + index}\n                    type={control.type}\n                    placeholder={control.placeholder}\n                    valid={control.valid}\n                    iconClassName={control.iconClassName}\n                    showValidate={control.showValidate}\n                    onChange={(e) => this.onChangeHandler(e, controlName)}\n                    errorMessage={control.errorMessage}\n                    onBlur={() => this.onBlur(controlName)}\n                    value={control.value}\n                />\n            );\n        });\n\n        return inputs;\n    };\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        let isValid = true;\n        const formControls = {...this.state.formControls};\n\n        Object.keys(formControls).forEach((controlName) => {\n\n            let control = {...formControls[controlName]};\n\n            control.showValidate = true;\n            formControls[controlName] = control;\n\n            if (!control.valid && isValid) {\n                isValid = false;\n            }\n        });\n\n        if (isValid) {\n            axios.post(CONFIG.apiServer + \"oauth/token\", {\n                client_id: 11,\n                client_secret: '2UD9eZtGyZi100m6JbDsmz4noHkgHss36m9cUgB8',\n                grant_type: 'password',\n                username: formControls.email.value,\n                password: formControls.password.value,\n            },{\n                headers: {\n                    'Accept': 'application/json',\n                }\n            }).then((res) => {\n                if (res.status === 200) {\n                    Auth.signIn(res.data.access_token);\n                }\n            }).catch((error) => {\n                let control = formControls.email;\n                control.valid = false;\n                control.showValidate = true;\n                control.errorMessage = 'Invalid email or password.';\n                formControls.email = control;\n                this.setState({\n                    formControls\n                });\n            });\n        } else {\n            this.setState({\n                formControls\n            });\n        }\n    };\n\n    render () {\n        return (\n            <React.Fragment>\n                <h1>Sign In</h1>\n                <form onSubmit={this.handleSubmit}>\n                    {this.renderInputs()}\n                    <div className=\"sign-button-wrapper\">\n                        <button type=\"submit\" className=\"btn default-btn\">Sign In</button>\n                    </div>\n                    <div className=\"other-type-sign\">\n                        <h3>Have not account yet?</h3>\n                        <Link to={'/signup'}>Sign Up</Link>\n                    </div>\n                </form>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default SingIn;\n","import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport Input from \"../../utils/UI/Input/Input\"\nimport Validation from \"../../utils/Validation/Validation\";\nimport {CONFIG} from \"../../config\";\nimport axios from \"axios\";\n\nclass SingIn extends React.Component {\n\n    state = {\n\n        formControls: {\n            name: {\n                type: 'text',\n                placeholder: 'Name',\n                value: '',\n                valid: false,\n                errorMessage: 'Enter valid name',\n                iconClassName: 'fas fa-user',\n                showValidate: false,\n                validation: {\n                    required: true,\n                    minLength: 3,\n                    maxLength: 60\n                }\n            },\n            email: {\n                type: 'email',\n                placeholder: 'Email',\n                value: '',\n                valid: false,\n                errorMessage: 'Enter valid email',\n                iconClassName: 'fas fa-envelope',\n                showValidate: false,\n                validation: {\n                    required: true,\n                    email: true\n                }\n            },\n            password: {\n                type: 'password',\n                placeholder: 'Password',\n                value: '',\n                valid: false,\n                errorMessage: 'Enter valid password',\n                iconClassName: 'fas fa-lock',\n                showValidate: false,\n                validation: {\n                    required: true,\n                    minLength: 8,\n                    maxLength: 30,\n                    minCountLetters: 1,\n                    minCountUpperCase: 1,\n                    minCountLowerCase: 1,\n                    minCountDigits: 1,\n                    passwordSymbols: true,\n                }\n            },\n            repassword: {\n                type: 'password',\n                placeholder: 'Re-password',\n                value: '',\n                valid: false,\n                errorMessage: 'Enter valid repassword',\n                iconClassName: 'fas fa-lock',\n                showValidate: false,\n                validation: {\n                    required: true,\n                    equalTo: 'password'\n                }\n            }\n        },\n    }\n\n    onBlur = (controlName) => {\n        const formControls = {...this.state.formControls};\n        const control = {...formControls[controlName]};\n        control.showValidate = true;\n        formControls[controlName] = control;\n\n        this.setState({\n            formControls\n        });\n    }\n\n    onChangeHandler = (event, controlName) => {\n        const formControls = {...this.state.formControls};\n        const control = {...formControls[controlName]};\n\n        control.value = (event.target).value;\n        let validateControlInfo = this.validateControl(control.value, control.validation);\n\n        control.valid = validateControlInfo.isValid;\n        if (validateControlInfo.errorMessage !== '') {\n            control.errorMessage = validateControlInfo.errorMessage;\n        }\n\n        formControls[controlName] = control;\n\n        this.setState({\n            formControls\n        });\n    };\n\n    validateControl = (value, validation) => {\n        if (!validation) {\n            return {isValid: true, errorMessage: ''};\n        }\n\n        let validator = new Validation();\n\n        let isValid = true;\n        let errorMessage = '';\n\n        if (validation.required && isValid) {\n            isValid = !validator.isEmpty(value);\n            if (!isValid) errorMessage = 'Field is required.';\n        }\n\n        if (validation.email && isValid) {\n            isValid = validator.checkEmail(value);\n            if (!isValid) errorMessage = 'Invalid email.';\n        }\n\n        if (validation.minLength && isValid) {\n            isValid = validator.checkMinLength(value, validation.minLength);\n            if (!isValid) errorMessage = 'You should put minimum ' + validation.minLength + ' chars.';\n        }\n\n        if (validation.maxLength && isValid) {\n            isValid = validator.checkMaxLength(value, validation.maxLength);\n            if (!isValid) errorMessage = 'You can put maximum ' + validation.maxLength + ' chars.';\n        }\n\n        if (validation.equalTo && isValid) {\n            isValid = (value === this.state.formControls[validation.equalTo].value);\n            if (!isValid) errorMessage = 'Passwords should be equal.';\n        }\n\n        if (validation.minCountLetters && isValid) {\n            isValid = validator.checkPasswordSymbols(value);\n            if (!isValid) errorMessage = 'You can use only latin letters, numbers and symbols(!,#,$,%,&,*,+,?,@,^)';\n        }\n\n        if (validation.minCountUpperCase && isValid) {\n            isValid = validator.checkMinCountUpperCase(value, validation.minCountUpperCase);\n            if (!isValid) errorMessage = 'You should put minimum ' + validation.minCountUpperCase + ' letter(s) in upper case.';\n        }\n\n        if (validation.minCountLowerCase && isValid) {\n            isValid = validator.checkMinCountLowerCase(value, validation.minCountLowerCase);\n            if (!isValid) errorMessage = 'You should put minimum ' + validation.minCountLowerCase + ' letter(s) in lower case.';\n        }\n\n        if (validation.minCountDigits && isValid) {\n            isValid = validator.checkMinCountDigits(value, validation.minCountDigits);\n            if (!isValid) errorMessage = 'You should put minimum ' + validation.minCountDigits + ' digit(s).';\n        }\n\n        if (validation.onlyLatin && isValid) {\n            isValid = (value === this.state.formControls[validation.equalTo].value);\n            if (!isValid) errorMessage = 'Passwords should be equal.';\n        }\n\n        return {isValid: isValid, errorMessage: errorMessage};\n    };\n\n\n    renderInputs = () => {\n        const inputs = Object.keys(this.state.formControls).map((controlName, index) => {\n            const control = this.state.formControls[controlName];\n            return (\n                <Input\n                    key={controlName + index}\n                    type={control.type}\n                    placeholder={control.placeholder}\n                    valid={control.valid}\n                    iconClassName={control.iconClassName}\n                    showValidate={control.showValidate}\n                    onChange={(e) => this.onChangeHandler(e, controlName)}\n                    errorMessage={control.errorMessage}\n                    onBlur={() => this.onBlur(controlName)}\n                    value={control.value}\n                />\n            );\n        });\n\n        return inputs;\n    };\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        let isValid = true;\n        const formControls = {...this.state.formControls};\n\n        Object.keys(formControls).forEach((controlName) => {\n\n            let control = {...formControls[controlName]};\n\n            control.showValidate = true;\n            formControls[controlName] = control;\n\n            if (!control.valid && isValid) {\n                isValid = false;\n            }\n        });\n\n        if (isValid) {\n            axios.post(CONFIG.apiServer + \"api/register\", {\n                name: formControls.name.value,\n                email: formControls.email.value,\n                password: formControls.password.value,\n            }, {\n                headers: {\n                    'Accept': 'application/json'\n                }\n            }).then((res) => {\n                window.location.href = \"/signin\";\n            }).catch((error) => {\n                if (error.response.data.data.email === \"Email already exists.\") {\n                    let control = formControls.email;\n                    control.valid = false;\n                    control.showValidate = true;\n                    control.errorMessage = 'User with the same email already exists.';\n                    formControls.email = control;\n                    this.setState({\n                        formControls\n                    });\n                } else {\n                    alert(\"Unknown error\");\n                }\n            });\n        } else {\n            this.setState({\n                formControls\n            });\n        }\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <h1>Sign Up</h1>\n                <form onSubmit={this.handleSubmit}>\n                    {this.renderInputs()}\n                    <div className=\"sign-button-wrapper\">\n                        <button type=\"submit\" className=\"btn default-btn\">Create</button>\n                    </div>\n                    <div className=\"other-type-sign\">\n                        <h3>Have account already?</h3>\n                        <Link to={'/signin'}>Sign In</Link>\n                    </div>\n                </form>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default SingIn;\n","import React from \"react\";\nimport './Note.scss'\nimport {Link} from \"react-router-dom\";\n\nfunction Note(props) {\n    return (\n        <div className=\"card note-wrapper default-block\">\n            <Link to={'/note/' + props.note.id}>\n                <div className=\"note\">\n                    <div className=\"note-header\">\n                        <h3>{props.note.title}</h3>\n                    </div>\n                    <div className=\"note-body\">\n                        <p>{props.note.text}</p>\n                    </div>\n                </div>\n            </Link>\n        </div>\n    );\n}\n\nexport default Note;\n","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport './ManageNote.scss';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport axios from \"axios\";\nimport {CONFIG} from \"../../config\";\nimport Auth from \"../../utils/Auth/Auth\";\n\nclass ManageNote extends React.Component {\n\n    state = {\n        formControls: {\n            title: {\n                value: '',\n                isValid: false,\n                isBlur: false,\n                errorMessage: 'This field is required.'\n            },\n            text: {\n                value: '',\n                isValid: false,\n                isBlur: false,\n                errorMessage: 'This field is required.'\n            }\n        }\n    }\n\n    componentWillReceiveProps(props) {\n        const formControls = {...this.state.formControls};\n        formControls.title.value = props.editMode ? props.note.title : '';\n        formControls.title.isValid = props.editMode;\n        formControls.text.value = props.editMode ? props.note.text : '';\n        formControls.text.isValid = props.editMode;\n        this.setState(formControls);\n    }\n\n    inputOnChangeHandler = (e, controlName) => {\n        const formControls = {...this.state.formControls};\n        formControls[controlName].value = e.target.value;\n\n        if (formControls[controlName].value.length === 0) {\n            formControls[controlName].errorMessage = 'This field is required.';\n            formControls[controlName].isValid = false;\n        } else {\n            formControls[controlName].errorMessage = '';\n            formControls[controlName].isValid = true;\n        }\n\n        this.setState(formControls);\n    }\n\n    inputOnBlurHandler = (controlName) => {\n        const formControls = {...this.state.formControls};\n        formControls[controlName].isBlur = true;\n        this.setState(formControls);\n    }\n\n    isFormValid = () => {\n        for (const controlName in this.state.formControls) {\n            if (!this.state.formControls[controlName].isValid) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    saveNote = () => {\n        if (this.isFormValid()) {\n            if (this.props.editMode) {\n                axios.put(CONFIG.apiServer + \"api/notes/\" + this.props.note.id, {\n                    title: this.state.formControls.title.value,\n                    text: this.state.formControls.text.value\n                }, {\n                    headers: {\n                        'Accept': 'application/json',\n                        'Authorization': 'Bearer ' + Auth.loggedApiKey\n                    }\n                }).then((res) => {\n                    this.props.onChangeNote(res.data.data);\n                    this.props.onClosePopup();\n                }).catch(() => {\n                    alert('Unknown error. Please reload page and try it one more time.');\n                });\n            } else {\n                axios.post(CONFIG.apiServer + \"api/notes\", {\n                    title: this.state.formControls.title.value,\n                    text: this.state.formControls.text.value\n                }, {\n                    headers: {\n                        'Accept': 'application/json',\n                        'Authorization': 'Bearer ' + Auth.loggedApiKey\n                    }\n                }).then((res) => {\n                    this.props.onChangeNote(res.data.data);\n                    this.props.onClosePopup();\n                }).catch(() => {\n                    alert('Unknown error. Please reload page and try it one more time.');\n                });\n            }\n        }\n    }\n\n    render() {\n        return (\n            <Modal animation={false} size=\"lg\" show={this.props.isOpened} onHide={this.props.onClosePopup}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{this.props.editMode ? 'Edit note' : 'New note'}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"block-title form-group\">\n                        <input className=\"form-control\" type=\"text\" value={this.state.formControls.title.value}\n                               onChange={(e) => {this.inputOnChangeHandler(e, 'title')}}\n                               onBlur={(e) => {this.inputOnBlurHandler('title')}}\n                               placeholder=\"Title\"/>\n                        <small className=\"error-message\">{this.state.formControls.title.isBlur && !this.state.formControls.title.isValid  ? this.state.formControls.title.errorMessage : ''}</small>\n                    </div>\n                    <div className=\"note-text form-group\">\n                        <textarea className=\"form-control\" value={this.state.formControls.text.value}\n                                  onChange={(e) => {this.inputOnChangeHandler(e, 'text')}}\n                                  onBlur={(e) => {this.inputOnBlurHandler('text')}}\n                                  placeholder=\"Text\"/>\n                        <small className=\"error-message\">{this.state.formControls.text.isBlur && !this.state.formControls.text.isValid  ? this.state.formControls.text.errorMessage : ''}</small>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <div className=\"option-buttons\">\n                        <button className=\"save-btn option-button\" onClick={this.saveNote}><FontAwesomeIcon\n                            icon=\"check\"/> Save\n                        </button>\n                    </div>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default ManageNote;\n","import React from \"react\";\nimport Note from './Note/Note'\nimport axios from \"axios\";\nimport {CONFIG} from \"../../config\";\nimport Auth from \"../../utils/Auth/Auth\";\nimport \"./Main.scss\"\nimport ManageNote from \"../ManageNote/ManageNote\";\n\nclass Main extends React.Component {\n    state = {\n        notes: [],\n        hasNotes: true,\n        openedModal: false,\n    }\n\n    componentDidMount = () => {\n        axios.get(CONFIG.apiServer + \"api/notes\",{\n            headers: {\n                'Accept': 'application/json',\n                'Authorization': 'Bearer ' + Auth.loggedApiKey\n            }\n        }).then((res) => {\n            this.setState({\n                notes: res.data.data,\n                hasNotes: false\n            });\n        }).catch((error) => {\n            this.setState({\n                hasNotes: false\n            });\n        });\n    }\n\n    renderNotes = () => {\n        const notes = [...this.state.notes];\n\n        if (notes.length === 0 && !this.state.hasNotes) {\n            return (\n\n                    <div className=\"card default-block\">\n                        <h5 className=\"text-center\">You don`t have notes!</h5>\n                    </div>\n\n            );\n        }\n\n        return notes.map((note, index) => (\n                <Note\n                    key={index}\n                    note={note}\n                />\n            )\n        );\n    }\n\n    addNote = (note) => {\n        const notes = [...this.state.notes];\n        notes.unshift(note);\n        this.setState({notes});\n    }\n\n    onClosePopup = () => {\n        this.setState({openedModal: false});\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <ManageNote\n                    isOpened={this.state.openedModal}\n                    onClosePopup={this.onClosePopup}\n                    editMode={false}\n                    onChangeNote={this.addNote}\n                />\n                <button className=\"add-new-note-btn\" onClick={() => {this.setState({openedModal: true})}}/>\n                <div className=\"container-fluid\">\n                        <div className=\"\">\n                            <div className=\"card-columns\">\n                                {this.renderNotes()}\n                            </div>\n                        </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Main;\n","import React from \"react\";\nimport \"./Note.scss\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport axios from \"axios\";\nimport {CONFIG} from \"../../config\";\nimport Auth from \"../../utils/Auth/Auth\";\nimport ManageNote from \"../ManageNote/ManageNote\";\n\nclass Note extends React.Component {\n\n    state = {\n        note: null,\n        authors: [],\n        openedModal: false,\n        isFound: true,\n        viewedAuthorInput: false,\n        formControls: {\n            authorEmail: {\n                value: '',\n                isValid: '',\n                isBlur: '',\n                errorMessage: ''\n            }\n        }\n    }\n\n    componentDidMount = () => {\n        axios.get(CONFIG.apiServer + \"api/notes/\" + this.props.match.params.id, {\n            headers: {\n                'Accept': 'application/json',\n                'Authorization': 'Bearer ' + Auth.loggedApiKey\n            }\n        }).then((res) => {\n            this.setState({\n                note: res.data.data\n            });\n            axios.get(CONFIG.apiServer + \"api/authors/note/\" + this.props.match.params.id, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Authorization': 'Bearer ' + Auth.loggedApiKey\n                }\n            }).then((res) => {\n                this.setState({\n                    authors: res.data.data\n                });\n            })\n        }).catch((error) => {\n            this.setState({isFound: false});\n        });\n    }\n\n    renderAuthors = () => {\n        return this.state.authors.map((author, index) => (\n                <li key={index} className={author.is_creator === 1 ? \"main-author\" : \"\"}>\n                    {!author.is_creator ? <FontAwesomeIcon icon=\"trash-alt\"\n                    onClick={() => {this.deleteAuthor(author)}}\n                    /> : '' }\n                    {author.name} <small>({author.email})</small>\n                    </li>\n            )\n        );\n    }\n\n    deleteAuthor = (author) => {\n        const authors = [...this.state.authors];\n        var index = authors.indexOf(author);\n        if (index > -1) {\n            axios.delete(CONFIG.apiServer + \"api/authors/\" + author.id, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Authorization': 'Bearer ' + Auth.loggedApiKey\n                }\n            }).then((res) => {\n                authors.splice(index, 1);\n                this.setState({authors});\n            }).catch((error) => {\n                alert('Unknown error. Please reload page and try it one more time.');\n            });\n        }\n\n\n    }\n\n    onClosePopup = () => {\n        this.setState({openedModal: false})\n    }\n\n    onChangeNote = (note) => {\n        this.setState({note: note});\n    }\n\n    deleteNote = () => {\n        if (window.confirm('Do you really want to delete this note?')) {\n            axios.delete(CONFIG.apiServer + \"api/notes/\" + this.state.note.id, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Authorization': 'Bearer ' + Auth.loggedApiKey\n                }\n            }).then((res) => {\n                window.location.href = \"/\";\n            }).catch(() => {\n                alert('Unknown error. Please reload page and try it one more time.');\n            });\n        }\n    }\n\n    inputOnBlurHandler = (controlName) => {\n        const formControls = {...this.state.formControls};\n        formControls[controlName].isBlur = true;\n        this.setState(formControls);\n    }\n\n    inputOnChangeHandler = (e, controlName) => {\n        const formControls = {...this.state.formControls};\n        formControls[controlName].value = e.target.value;\n        formControls[controlName].errorMessage = '';\n        formControls[controlName].isValid = true;\n\n        if (formControls[controlName].value.length === 0) {\n            formControls[controlName].errorMessage = 'This field is required.';\n            formControls[controlName].isValid = false;\n        }\n        if(controlName === 'authorEmail') {\n            // eslint-disable-next-line\n            let validEmailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n            if(!validEmailRegex.test(formControls[controlName].value)) {\n                formControls[controlName].errorMessage = 'Invalid email.';\n                formControls[controlName].isValid = false;\n            }\n        }\n\n        this.setState({formControls});\n    }\n\n    onAddAuthor = () => {\n        if (this.state.formControls.authorEmail.isValid) {\n            axios.post(CONFIG.apiServer + \"api/authors/note/\" + this.state.note.id, {\n                email: this.state.formControls.authorEmail.value,\n            }, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Authorization': 'Bearer ' + Auth.loggedApiKey\n                }\n            }).then((res) => {\n                const authors = [...this.state.authors];\n                authors.push(res.data.data);\n                this.setState({\n                    viewedAuthorInput: false,\n                    authors: authors\n                });\n            }).catch((error) => {\n                const formControls = {...this.state.formControls};\n                if (error.response.data.data.note_id) {\n                    formControls.authorEmail.errorMessage = error.response.data.data.note_id;\n                    formControls.authorEmail.isValid = false;\n                } else if (error.response.data.data.email) {\n                    formControls.authorEmail.errorMessage = error.response.data.data.email;\n                    formControls.authorEmail.isValid = false;\n                } else {\n                    alert('Unknown error. Please reload page and try it one more time.');\n                }\n                this.setState({formControls});\n            });\n        }\n    }\n\n    renderFunctionalityToAddAuthor = () => {\n        if (!this.state.viewedAuthorInput) {\n            return (\n                <li key={'u123'}>\n                    <button className=\"btn note-add-new\" onClick={() => {this.setState({viewedAuthorInput: true})}}>\n                        <FontAwesomeIcon icon=\"user-plus\"/> Add new\n                    </button>\n                </li>\n            );\n        } else {\n            return (\n                <li key={'u123'}>\n                    <div className=\"form-group\">\n                        <input className=\"form-control\" value={this.state.formControls.authorEmail.value}\n                               onChange={(e) => {this.inputOnChangeHandler(e,'authorEmail')}}\n                               onBlur={(e) => {this.inputOnBlurHandler('authorEmail')}}/>\n                        <small className=\"error-message\">{this.state.formControls.authorEmail.isBlur && !this.state.formControls.authorEmail.isValid  ? this.state.formControls.authorEmail.errorMessage : ''}</small>\n                    </div>\n                    <div className=\"form-group\">\n                        <button className=\"btn note-add-new\" onClick={this.onAddAuthor}><FontAwesomeIcon icon=\"user-plus\"/> Add</button>\n                    </div>\n                </li>\n            );\n        }\n    }\n\n    render() {\n        if (this.state.isFound && !this.state.note) {\n            return (\n                <div className=\"container\">\n                    <div className=\"default-block\">\n                        <h5 className=\"text-center\">Loading...</h5>\n                    </div>\n                </div>\n            );\n        }\n\n        if (!this.state.isFound) {\n            return (\n                <div className=\"container\">\n                    <div className=\"default-block\">\n                        <h5 className=\"text-center\">Note not found!</h5>\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"container\">\n                <ManageNote\n                    isOpened={this.state.openedModal}\n                    onClosePopup={this.onClosePopup}\n                    editMode={true}\n                    note={this.state.note}\n                    onChangeNote={this.onChangeNote}\n                />\n                <div className=\"row\">\n                    <div className=\"col-lg-8\">\n                        <div className=\"default-block\">\n                            <div className=\"option-buttons\">\n                                <button className=\"edit-btn option-button\" onClick={() => {\n                                    this.setState({openedModal: true})\n                                }}><FontAwesomeIcon icon=\"pen\"/> Edit\n                                </button>\n                                <button className=\"delete-btn option-button\" onClick={this.deleteNote}><FontAwesomeIcon\n                                    icon=\"trash-alt\"/> Delete\n                                </button>\n                            </div>\n                            <h2 className=\"block-title\">{this.state.note.title}</h2>\n                            <div className=\"note-text\">\n                                <div>{this.state.note.text}</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-lg-4\">\n                        <div className=\"default-block\">\n                            <h2 className=\"block-title\">Authors</h2>\n                            <ul className=\"note-authors\">\n                                {this.renderAuthors()}\n                                {this.renderFunctionalityToAddAuthor()}\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Note;\n","import React from \"react\";\nimport \"./User.scss\";\nimport axios from \"axios\";\nimport {CONFIG} from \"../../config\";\nimport Auth from \"../../utils/Auth/Auth\";\nimport swal from 'sweetalert';\n\nclass User extends React.Component {\n\n    state = {\n        loaded: false,\n        formControls: {\n            name: {\n                value: '',\n                errorMessage: ''\n            },\n            email: {\n                value: '',\n                errorMessage: ''\n            },\n            password: {\n                value: '',\n                errorMessage: ''\n            },\n            repassword: {\n                value: '',\n                errorMessage: ''\n            }\n        }\n    }\n\n    inputOnBlurHandler = (controlName) => {\n        const formControls = {...this.state.formControls};\n        formControls[controlName].errorMessage = '';\n        this.setState(formControls);\n    }\n\n    componentDidMount = () => {\n        axios.get(CONFIG.apiServer + \"api/user\", {\n            headers: {\n                'Accept': 'application/json',\n                'Authorization': 'Bearer ' + Auth.loggedApiKey\n            }\n        }).then((res) => {\n            const formControls = this.state.formControls;\n            formControls.name.value = res.data.data.name\n            formControls.email.value = res.data.data.email\n            this.setState({\n                formControls: formControls,\n                loaded: true\n            });\n        }).catch((error) => {\n            Auth.logOut();\n        });\n    }\n\n    inputOnChangeHandler = (e, controlName) => {\n        const formControls = {...this.state.formControls};\n        formControls[controlName].value = e.target.value;\n\n        this.setState(formControls);\n    }\n\n    changeName = () => {\n        if (this.state.formControls.name.value.length !== 0) {\n            axios.put(CONFIG.apiServer + \"api/user\", {\n                name: this.state.formControls.name.value\n            }, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Authorization': 'Bearer ' + Auth.loggedApiKey\n                }\n            }).then((res) => {\n                swal(\"Good job!\", \"Name successful saved!\", \"success\");\n            }).catch(() => {\n                swal(\"Bad!\", \"Something went wrong!\", \"error\");\n            });\n        } else {\n            const formControls = {...this.state.formControls};\n            formControls.name.errorMessage = 'This field is required';\n            this.setState({formControls});\n        }\n    }\n\n    changeEmail = () => {\n        if (this.state.formControls.email.value.length !== 0) {\n            // eslint-disable-next-line\n            let validEmailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n            if (validEmailRegex.test(this.state.formControls.email.value)) {\n                axios.put(CONFIG.apiServer + \"api/user\", {\n                    email: this.state.formControls.email.value\n                }, {\n                    headers: {\n                        'Accept': 'application/json',\n                        'Authorization': 'Bearer ' + Auth.loggedApiKey\n                    }\n                }).then((res) => {\n                    swal(\"Good job!\", \"Email successful saved!\", \"success\");\n                }).catch((error) => {\n                    if (error.response.status === 404) {\n                        console.log(error.response.data)\n                        if (error.response.data.data.email && error.response.data.data.email === 'Email already exists.') {\n                            const formControls = {...this.state.formControls};\n                            formControls.email.errorMessage = 'Email already exists';\n                            this.setState({formControls});\n                            return ;\n                        }\n                    }\n                    swal(\"Bad!\", \"Something went wrong!\", \"error\");\n                });\n            } else {\n                const formControls = {...this.state.formControls};\n                formControls.email.errorMessage = 'Invalid email';\n                this.setState({formControls});\n            }\n        } else {\n            const formControls = {...this.state.formControls};\n            formControls.email.errorMessage = 'This field is required';\n            this.setState({formControls});\n        }\n    }\n\n    changePassword = () => {\n        const formControls = {...this.state.formControls};\n        if (this.state.formControls.password.value.length === 0) {\n            formControls.password.errorMessage = 'This field is required';\n            this.setState({formControls});\n            return ;\n        }\n\n        if (this.state.formControls.repassword.value.length === 0) {\n            formControls.repassword.errorMessage = 'This field is required';\n            this.setState({formControls});\n            return ;\n        }\n\n        if (this.state.formControls.repassword.value !== this.state.formControls.password.value) {\n            formControls.repassword.errorMessage = 'Fields must be equals';\n            this.setState({formControls});\n            return ;\n        }\n\n        axios.put(CONFIG.apiServer + \"api/user\", {\n            password: this.state.formControls.password.value\n        }, {\n            headers: {\n                'Accept': 'application/json',\n                'Authorization': 'Bearer ' + Auth.loggedApiKey\n            }\n        }).then((res) => {\n            formControls.repassword.value = '';\n            formControls.password.value = '';\n            this.setState({formControls});\n            swal(\"Good job!\", \"Password successful saved!\", \"success\");\n        }).catch(() => {\n            swal(\"Bad!\", \"Something went wrong!\", \"error\");\n        });\n    }\n\n    render() {\n        if (!this.state.loaded) {\n            return (\n                <div className=\"container\">\n                    <div className=\"default-block\">\n                        <h4>Loading...</h4>\n                    </div>\n                </div>\n            );\n        }\n        return (\n            <div className=\"container\">\n                <div className=\"default-block\">\n                    <h2 className=\"block-title\">User settings</h2>\n                    <div className=\"user-change-info-block\">\n                        <div className=\"user-setting-form-block\">\n                            <div className=\"row\">\n                                <div className=\"col-4\">\n                                    <h3 className=\"option-title\">Name</h3>\n                                </div>\n                                <div className=\"col-8\">\n                                    <div className=\"form-group\">\n                                        <input type=\"text\" className=\"form-control default-input\" name=\"name\"\n                                               placeholder=\"Name\"\n                                               value={this.state.formControls.name.value}\n                                               onChange={(e) => {this.inputOnChangeHandler(e, 'name')}}\n                                               onBlur={(e) => {this.inputOnBlurHandler('name')}}/>\n                                        <small className=\"error-message\">{this.state.formControls.name.errorMessage}</small>\n                                    </div>\n                                    <div className=\"form-group text-center\">\n                                        <button className=\"btn default-btn\" onClick={this.changeName}>Change</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"user-setting-form-block\">\n                            <div className=\"row\">\n                                <div className=\"col-4\">\n                                    <h3 className=\"option-title\">Change password</h3>\n                                </div>\n                                <div className=\"col-8\">\n                                    <div className=\"form-group\">\n                                        <input type=\"password\" className=\"form-control default-input\"\n                                               name=\"new_password\"\n                                               placeholder=\"New password\" value={this.state.formControls.password.value}\n                                               onChange={(e) => {this.inputOnChangeHandler(e, 'password')}}\n                                               onBlur={(e) => {this.inputOnBlurHandler('password')}}/>\n                                        <small className=\"error-message\">{this.state.formControls.password.errorMessage}</small>\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <input type=\"password\" className=\"form-control default-input\" name=\"re_password\"\n                                               placeholder=\"Re-password\" value={this.state.formControls.repassword.value}\n                                               onChange={(e) => {this.inputOnChangeHandler(e, 'repassword')}}\n                                               onBlur={(e) => {this.inputOnBlurHandler('repassword')}}/>\n                                        <small className=\"error-message\">{this.state.formControls.repassword.errorMessage}</small>\n                                    </div>\n                                    <div className=\"form-group text-center\">\n                                        <button className=\"btn default-btn\" onClick={this.changePassword}>Change</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"user-setting-form-block\">\n                            <div className=\"row\">\n                                <div className=\"col-4\">\n                                    <h3 className=\"option-title\">Email</h3>\n                                </div>\n                                <div className=\"col-8\">\n                                    <div className=\"form-group\">\n                                        <input type=\"email\" className=\"form-control default-input\" name=\"email\"\n                                               placeholder=\"Email\"\n                                               value={this.state.formControls.email.value}\n                                               onChange={(e) => {this.inputOnChangeHandler(e, 'email')}}\n                                               onBlur={(e) => {this.inputOnBlurHandler('email')}}/>\n                                        <small className=\"error-message\">{this.state.formControls.email.errorMessage}</small>\n                                    </div>\n                                    <div className=\"form-group text-center\">\n                                        <button className=\"btn default-btn\" onClick={this.changeEmail}>Confirm new email</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default User;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faScroll, faUser, faSignOutAlt, faTrashAlt, faPen, faUserPlus, faTag, faCheck} from '@fortawesome/free-solid-svg-icons';\nimport Auth from \"../utils/Auth/Auth\";\nlibrary.add(faScroll, faUser, faSignOutAlt, faTrashAlt, faPen, faUserPlus, faTag, faCheck);\n\nfunction DefaultLayout(props) {\n    return (\n        <div className=\"wrapper\">\n            <header className=\"container-fluid\">\n                <nav className=\"navbar navbar-light main-navbar default-block\">\n                    <a className=\"navbar-brand\" href=\"/\"><FontAwesomeIcon icon=\"scroll\" /> Notes</a>\n                    <div>\n                        <ul className=\"navbar-nav navbar-expand ml-auto\">\n                            <li className=\"nav-item\">\n                                <a className=\"nav-link p-0\" href=\"/user\">\n                                    <FontAwesomeIcon icon=\"user\" />\n                                </a>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a className=\"nav-link p-0\" href={\"/sigin\"} onClick={(e) => {Auth.logOut();e.preventDefault();}}>\n                                    <FontAwesomeIcon icon=\"sign-out-alt\" />\n                                </a>\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n            </header>\n            <div className=\"content\">\n                {props.children}\n            </div>\n        </div>\n    );\n}\n\nexport default DefaultLayout;\n","import React from 'react'\nimport {Redirect, Route} from 'react-router-dom'\n\nimport DefaultLayout from '../DefaultLayout'\nimport Auth from \"../../utils/Auth/Auth\";\n\nconst DefaultRoute = ({ component: Component, ...rest }) => {\n    if (!Auth.isLoggedIn) {\n        return (<Redirect to={\"/signin\"}/>);\n    }\n\n    return (\n        <Route {...rest} render={props => (\n            <DefaultLayout>\n                <Component {...props} />\n            </DefaultLayout>\n        )} />\n    )\n}\n\nexport default DefaultRoute;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.scss';\nimport {BrowserRouter, Switch} from \"react-router-dom\";\nimport SignRoute from \"./hoc/Routes/SignRoute\"\nimport SignIn from \"./components/Sign/SignIn\"\nimport SignUp from \"./components/Sign/SignUp\"\nimport Main from \"./components/Main/Main\"\nimport Note from \"./components/Note/Note\"\nimport User from \"./components/User/User\"\nimport DefaultRoute from \"./hoc/Routes/DefaultRoute\";\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <DefaultRoute path=\"/\" exact component={Main}/>\n                <DefaultRoute path=\"/note/:id\" exact component={Note}/>\n                <DefaultRoute path=\"/user\" exact component={User}/>\n                <SignRoute path=\"/signin\" exact component={SignIn}/>\n                <SignRoute path=\"/signup\" exact component={SignUp}/>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}